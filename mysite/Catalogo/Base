> // Aqui esta las bases de datos presentes:
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> 
> use A1700711
switched to db A1700711
> //Aqui se guarda la base de datos
> db.user.save({username: "A1700711"})
WriteResult({ "nInserted" : 1 })
> // Bases de datos ha sido creada
> show dbs
A1700711  0.000GB
admin     0.000GB
config    0.000GB
local     0.000GB
> //Creacion de primer registro en la coleccion empleados
> db.empleados.insert({Nombre:'Enrique', apellidoPaterno:'Posada', apellidoMaterno:'Lozano', edad:22})
WriteResult({ "nInserted" : 1 })
> //se consulta la informacion creada
> db.empleados.find()
{ "_id" : ObjectId("5beecd3be5e05c833ca4fcfa"), "Nombre" : "Enrique", "apellidoPaterno" : "Posada", "apellidoMaterno" : "Lozano", "edad" : 22 }
> db.empleados.find({apellidoPaterno:'Posada'})
{ "_id" : ObjectId("5beecd3be5e05c833ca4fcfa"), "Nombre" : "Enrique", "apellidoPaterno" : "Posada", "apellidoMaterno" : "Lozano", "edad" : 22 }
> //ahora una consulta por nombre
> db.empleados.find({Nombre:'Enrique'})
{ "_id" : ObjectId("5beecd3be5e05c833ca4fcfa"), "Nombre" : "Enrique", "apellidoPaterno" : "Posada", "apellidoMaterno" : "Lozano", "edad" : 22 }
> //Prueba de busqueda case sensitive
> db.empleados.find({apellidoMaterno: /^lozano$/i })
{ "_id" : ObjectId("5beecd3be5e05c833ca4fcfa"), "Nombre" : "Enrique", "apellidoPaterno" : "Posada", "apellidoMaterno" : "Lozano", "edad" : 22 }
> db.empleados.find({apellidoMaterno: /^Lozano$/i })
{ "_id" : ObjectId("5beecd3be5e05c833ca4fcfa"), "Nombre" : "Enrique", "apellidoPaterno" : "Posada", "apellidoMaterno" : "Lozano", "edad" : 22 }
> //insertado de dos nuevos registros
> d.empleados.insert()
[2018-11-16T08:04:51.762-0600 E QUERY    [js] ReferenceError: d is not defined :
@(shell):1:1
> d.empleados.insert({Nombre:'Fabiana', apellidoPaterno:'Calderon', apellidoMaterno:'Becerra', edad:10, fechaCreacion:new Date() })
2018-11-16T08:06:22.148-0600 E QUERY    [js] ReferenceError: d is not defined :
@(shell):1:1
> db.empleados.insert({Nombre:'Fabiana', apellidoPaterno:'Calderon', apellidoMaterno:'Becerra', edad:10, fechaCreacion:new Date() })
WriteResult({ "nInserted" : 1 })
> db.empleados.insert({Nombre:'Enrique', apellidoPaterno:'Calderon', apellidoMaterno:'Balderas', edad:43, fechaCreacion: new Date() })
WriteResult({ "nInserted" : 1 })
> //Consulta de registros 
> db.empleados.find()
{ "_id" : ObjectId("5beecd3be5e05c833ca4fcfa"), "Nombre" : "Enrique", "apellidoPaterno" : "Posada", "apellidoMaterno" : "Lozano", "edad" : 22 }
{ "_id" : ObjectId("5beecefbe5e05c833ca4fcfb"), "Nombre" : "Fabiana", "apellidoPaterno" : "Calderon", "apellidoMaterno" : "Becerra", "edad" : 10, "fechaCreacion" : ISODate("2018-11-16T14:06:51.189Z") }
{ "_id" : ObjectId("5beecf52e5e05c833ca4fcfc"), "Nombre" : "Enrique", "apellidoPaterno" : "Calderon", "apellidoMaterno" : "Balderas", "edad" : 43, "fechaCreacion" : ISODate("2018-11-16T14:08:18.901Z") }
> db.empleados.find().pretty()
{
	"_id" : ObjectId("5beecd3be5e05c833ca4fcfa"),
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Posada",
	"apellidoMaterno" : "Lozano",
	"edad" : 22
}
{
	"_id" : ObjectId("5beecefbe5e05c833ca4fcfb"),
	"Nombre" : "Fabiana",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Becerra",
	"edad" : 10,
	"fechaCreacion" : ISODate("2018-11-16T14:06:51.189Z")
}
{
	"_id" : ObjectId("5beecf52e5e05c833ca4fcfc"),
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Balderas",
	"edad" : 43,
	"fechaCreacion" : ISODate("2018-11-16T14:08:18.901Z")
}
> // Consulta de empleados que tienen una eddad mayor a 10 anios
> db.empleados.find({edad: {$gt:10}})
{ "_id" : ObjectId("5beecd3be5e05c833ca4fcfa"), "Nombre" : "Enrique", "apellidoPaterno" : "Posada", "apellidoMaterno" : "Lozano", "edad" : 22 }
{ "_id" : ObjectId("5beecf52e5e05c833ca4fcfc"), "Nombre" : "Enrique", "apellidoPaterno" : "Calderon", "apellidoMaterno" : "Balderas", "edad" : 43, "fechaCreacion" : ISODate("2018-11-16T14:08:18.901Z") }
> //consulta de empleados que tienen mas de 4 anios de edad
> db.empleados
A1700711.empleados
> 
> 
> 
> 
> 
> 
> db.empleados.find({edad: {$gt:4}})
{ "_id" : ObjectId("5beecd3be5e05c833ca4fcfa"), "Nombre" : "Enrique", "apellidoPaterno" : "Posada", "apellidoMaterno" : "Lozano", "edad" : 22 }
{ "_id" : ObjectId("5beecefbe5e05c833ca4fcfb"), "Nombre" : "Fabiana", "apellidoPaterno" : "Calderon", "apellidoMaterno" : "Becerra", "edad" : 10, "fechaCreacion" : ISODate("2018-11-16T14:06:51.189Z") }
{ "_id" : ObjectId("5beecf52e5e05c833ca4fcfc"), "Nombre" : "Enrique", "apellidoPaterno" : "Calderon", "apellidoMaterno" : "Balderas", "edad" : 43, "fechaCreacion" : ISODate("2018-11-16T14:08:18.901Z") }
> //consultar empleados que tengan un campo
> db.empleados.find({fechaCreacion:{$exists:true}}).pretty()
{
	"_id" : ObjectId("5beecefbe5e05c833ca4fcfb"),
	"Nombre" : "Fabiana",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Becerra",
	"edad" : 10,
	"fechaCreacion" : ISODate("2018-11-16T14:06:51.189Z")
}
{
	"_id" : ObjectId("5beecf52e5e05c833ca4fcfc"),
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Balderas",
	"edad" : 43,
	"fechaCreacion" : ISODate("2018-11-16T14:08:18.901Z")
}
> //contar empleados que existen
> db.empleados.count()
3
> db.empleados.remove()
2018-11-16T08:33:59.188-0600 E QUERY    [js] Error: remove needs a query :
DBCollection.prototype._parseRemove@src/mongo/shell/collection.js:362:1
DBCollection.prototype.remove@src/mongo/shell/collection.js:389:18
@(shell):1:1
> db.empleados.count()
3
> db.empleados.remove({})
WriteResult({ "nRemoved" : 3 })
> db.empleados.count()
0
> //ahora ya todos los empleados se tienen
> db.empleados.insert({Nombre:'Enrique', apellidoPaterno:'Posada', apellidoMaterno:'Lozano', aniosExperiencia:4, ubicacion: {ciudad: 'QRO', pais: 'MEX'}, lenguajes: ['C', 'C++', 'Python']})
WriteResult({ "nInserted" : 1 })
> db.empleados.insert({Nombre:'Enrique', apellidoPaterno:'Calderon', apellidoMaterno:'Balderas', aniosExperiencia:12, ubicacion: {ciudad: 'QRO', pais: 'MEX'}, lenguajes: ['html', 'java', 'C++', 'C#']})
WriteResult({ "nInserted" : 1 })
> db.empleados.remove({})
WriteResult({ "nRemoved" : 2 })
> db.empleados.insert({_id:'L00000001', Nombre:'Enrique', apellidoPaterno:'Posada', apellidoMaterno:'Lozano', aniosExperiencia:4, ubicacion: {ciudad: 'QRO', pais: 'MEX'}, lenguajes: ['C', 'C++', 'Python']})
WriteResult({ "nInserted" : 1 })
> db.empleados.insert({_id:'L00000002', Nombre:'Enrique', apellidoPaterno:'Calderon', apellidoMaterno:'Balderas', aniosExperiencia:12, ubicacion: {ciudad: 'QRO', pais: 'MEX'}, lenguajes: ['html', 'java', 'C++', 'C#']})
WriteResult({ "nInserted" : 1 })
> db.empleados.insert({_id:'L00000003', Nombre:'Cesar', apellidoPaterno:'Buenfil', apellidoMaterno:'Test1', aniosExperiencia:1, ubicacion: {ciudad: 'CDMX', pais: 'MEX'}, lenguajes: ['C++', 'C#']})
WriteResult({ "nInserted" : 1 })
> db.empleados.insert({_id:'L00000004', Nombre:'Bernardo', apellidoPaterno:'Laing', apellidoMaterno:'Test2', aniosExperiencia:2, ubicacion: {ciudad: 'CDMX', pais: 'MEX'}, lenguajes: ['php', 'java', 'C++', 'C']})
WriteResult({ "nInserted" : 1 })
> db.empleados.insert({_id:'L00000005', Nombre:'Jorge', apellidoPaterno:'Nino', apellidoMaterno:'Test3', aniosExperiencia:5, ubicacion: {ciudad: 'MTY', pais: 'MEX'}, lenguajes: ['html', 'javascript', 'C', 'Python']})
WriteResult({ "nInserted" : 1 })
> db.empleados.insert({_id:'L00000006', Nombre:'Arturo', apellidoPaterno:'Borbolla', apellidoMaterno:'Test4', aniosExperiencia:6, ubicacion: {ciudad: 'GDL', pais: 'MEX'}, lenguajes: ['C', 'Python', 'java', 'Fortran']})
WriteResult({ "nInserted" : 1 })
> db.empleados.insert({_id:'L00000007', Nombre:'Andres', apellidoPaterno:'Raygadas', apellidoMaterno:'Test5', aniosExperiencia:7, ubicacion: {ciudad: 'MTY', pais: 'MEX'}, lenguajes: ['java', 'C++', 'C']})
WriteResult({ "nInserted" : 1 })
> db.empleados.insert({_id:'L00000008', Nombre:'Enrique', apellidoPaterno:'Calderon', apellidoMaterno:'Test6', aniosExperiencia:2, ubicacion: {ciudad: 'GDL', pais: 'MEX'}, lenguajes: ['php', 'Python']})
WriteResult({ "nInserted" : 1 })
> db.empleados.insert({_id:'L00000009', Nombre:'Enrique', apellidoPaterno:'Calderon', apellidoMaterno:'Test7', aniosExperiencia:1, ubicacion: {ciudad: 'QRO', pais: 'MEX'}, lenguajes: ['java', 'C++']})

WriteResult({ "nInserted" : 1 })
> db.empleados.insert({_id:'L00000010', Nombre:'Enrique', apellidoPaterno:'Calderon', apellidoMaterno:'Test8', aniosExperiencia:5, ubicacion: {ciudad: 'QRO', pais: 'MEX'}, lenguajes: ['html', 'java', 'C++', 'C#', 'Python']})
WriteResult({ "nInserted" : 1 })
> //conteo de empleados
> db.empleados.count()
10
> // Cuantos empleados tiene mas de 3 anios de experiencia laboral?
> db.empleados.find({aniosExperiencia:{$gt:3}}).count()
6
> //Obtener un empleado que tenga mas de 10 de experiencia 
> db.empleados.findOne({aniosExperiencia:{$gt:10}})
{
	"_id" : "L00000002",
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Balderas",
	"aniosExperiencia" : 12,
	"ubicacion" : {
		"ciudad" : "QRO",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"html",
		"java",
		"C++",
		"C#"
	]
}
> //Empleados que sepan html
> db.empleados.find({lenguajes:'html'}).pretty()
{
	"_id" : "L00000002",
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Balderas",
	"aniosExperiencia" : 12,
	"ubicacion" : {
		"ciudad" : "QRO",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"html",
		"java",
		"C++",
		"C#"
	]
}
{
	"_id" : "L00000005",
	"Nombre" : "Jorge",
	"apellidoPaterno" : "Nino",
	"apellidoMaterno" : "Test3",
	"aniosExperiencia" : 5,
	"ubicacion" : {
		"ciudad" : "MTY",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"html",
		"javascript",
		"C",
		"Python"
	]
}
{
	"_id" : "L00000010",
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Test8",
	"aniosExperiencia" : 5,
	"ubicacion" : {
		"ciudad" : "QRO",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"html",
		"java",
		"C++",
		"C#",
		"Python"
	]
}
> //Empleados que sepan html o java
> db.empleados.find({or:[{lenguajes:'html'}, {lenguajes:'java'}]}).pretty()
> db.empleados.find({or:[{lenguajes:'html'}, {lenguajes:'java'}]}).count()
0
> db.empleados.find({$or:[{lenguajes:'html'}, {lenguajes:'java'}]}).pretty()
{
	"_id" : "L00000002",
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Balderas",
	"aniosExperiencia" : 12,
	"ubicacion" : {
		"ciudad" : "QRO",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"html",
		"java",
		"C++",
		"C#"
	]
}
{
	"_id" : "L00000004",
	"Nombre" : "Bernardo",
	"apellidoPaterno" : "Laing",
	"apellidoMaterno" : "Test2",
	"aniosExperiencia" : 2,
	"ubicacion" : {
		"ciudad" : "CDMX",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"php",
		"java",
		"C++",
		"C"
	]
}
{
	"_id" : "L00000005",
	"Nombre" : "Jorge",
	"apellidoPaterno" : "Nino",
	"apellidoMaterno" : "Test3",
	"aniosExperiencia" : 5,
	"ubicacion" : {
		"ciudad" : "MTY",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"html",
		"javascript",
		"C",
		"Python"
	]
}
{
	"_id" : "L00000006",
	"Nombre" : "Arturo",
	"apellidoPaterno" : "Borbolla",
	"apellidoMaterno" : "Test4",
	"aniosExperiencia" : 6,
	"ubicacion" : {
		"ciudad" : "GDL",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"C",
		"Python",
		"java",
		"Fortran"
	]
}
{
	"_id" : "L00000007",
	"Nombre" : "Andres",
	"apellidoPaterno" : "Raygadas",
	"apellidoMaterno" : "Test5",
	"aniosExperiencia" : 7,
	"ubicacion" : {
		"ciudad" : "MTY",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"java",
		"C++",
		"C"
	]
}
{
	"_id" : "L00000009",
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Test7",
	"aniosExperiencia" : 1,
	"ubicacion" : {
		"ciudad" : "QRO",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"java",
		"C++"
	]
}
{
	"_id" : "L00000010",
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Test8",
	"aniosExperiencia" : 5,
	"ubicacion" : {
		"ciudad" : "QRO",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"html",
		"java",
		"C++",
		"C#",
		"Python"
	]
}
> //Empleados que sepan html y java
> db.empleados.find({$and:[{lenguajes:'html'}, {lenguajes:'java'}]}).pretty()
{
	"_id" : "L00000002",
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Balderas",
	"aniosExperiencia" : 12,
	"ubicacion" : {
		"ciudad" : "QRO",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"html",
		"java",
		"C++",
		"C#"
	]
}
{
	"_id" : "L00000010",
	"Nombre" : "Enrique",
	"apellidoPaterno" : "Calderon",
	"apellidoMaterno" : "Test8",
	"aniosExperiencia" : 5,
	"ubicacion" : {
		"ciudad" : "QRO",
		"pais" : "MEX"
	},
	"lenguajes" : [
		"html",
		"java",
		"C++",
		"C#",
		"Python"
	]
}
> //Explica de acuerdo a la salida de los siguientes comandos que es la informacion
> db.stats()
{
	"db" : "A1700711",
	"collections" : 2,
	"views" : 0,
	"objects" : 11,
	"avgObjSize" : 210.0909090909091,
	"dataSize" : 2311,
	"storageSize" : 53248,
	"numExtents" : 0,
	"indexes" : 2,
	"indexSize" : 53248,
	"fsUsedSize" : 250057711616,
	"fsTotalSize" : 318841946112,
	"ok" : 1
}
> //db.stats refleja la informacion con respecto a la base de datos y sus colecciones. Con ello tambien se puede visualizar informacion de almacenamiento, objetos, entre otras cosas.
> db.empleados.stats()
{
	"ns" : "A1700711.empleados",
	"size" : 2266,
	"count" : 10,
	"avgObjSize" : 226,
	"storageSize" : 36864,
	"capped" : false,
	"wiredTiger" : {
		"metadata" : {
			"formatVersion" : 1
		},
		"creationString" : "access_pattern_hint=none,allocation_size=4KB,app_metadata=(formatVersion=1),assert=(commit_timestamp=none,read_timestamp=none),block_allocation=best,block_compressor=snappy,cache_resident=false,checksum=on,colgroups=,collator=,columns=,dictionary=0,encryption=(keyid=,name=),exclusive=false,extractor=,format=btree,huffman_key=,huffman_value=,ignore_in_memory_cache_size=false,immutable=false,internal_item_max=0,internal_key_max=0,internal_key_truncate=true,internal_page_max=4KB,key_format=q,key_gap=10,leaf_item_max=0,leaf_key_max=0,leaf_page_max=32KB,leaf_value_max=64MB,log=(enabled=true),lsm=(auto_throttle=true,bloom=true,bloom_bit_count=16,bloom_config=,bloom_hash_count=8,bloom_oldest=false,chunk_count_limit=0,chunk_max=5GB,chunk_size=10MB,merge_custom=(prefix=,start_generation=0,suffix=),merge_max=15,merge_min=0),memory_page_image_max=0,memory_page_max=10m,os_cache_dirty_max=0,os_cache_max=0,prefix_compression=false,prefix_compression_min=4,source=,split_deepen_min_child=0,split_deepen_per_child=0,split_pct=90,type=file,value_format=u",
		"type" : "file",
		"uri" : "statistics:table:collection-9--8772203398389203732",
		"LSM" : {
			"bloom filter false positives" : 0,
			"bloom filter hits" : 0,
			"bloom filter misses" : 0,
			"bloom filter pages evicted from cache" : 0,
			"bloom filter pages read into cache" : 0,
			"bloom filters in the LSM tree" : 0,
			"chunks in the LSM tree" : 0,
			"highest merge generation in the LSM tree" : 0,
			"queries that could have benefited from a Bloom filter that did not exist" : 0,
			"sleep for LSM checkpoint throttle" : 0,
			"sleep for LSM merge throttle" : 0,
			"total size of bloom filters" : 0
		},
		"block-manager" : {
			"allocations requiring file extension" : 12,
			"blocks allocated" : 29,
			"blocks freed" : 6,
			"checkpoint size" : 4096,
			"file allocation unit size" : 4096,
			"file bytes available for reuse" : 16384,
			"file magic number" : 120897,
			"file major version number" : 1,
			"file size in bytes" : 36864,
			"minor version number" : 0
		},
		"btree" : {
			"btree checkpoint generation" : 78,
			"column-store fixed-size leaf pages" : 0,
			"column-store internal pages" : 0,
			"column-store variable-size RLE encoded values" : 0,
			"column-store variable-size deleted values" : 0,
			"column-store variable-size leaf pages" : 0,
			"fixed-record size" : 0,
			"maximum internal page key size" : 368,
			"maximum internal page size" : 4096,
			"maximum leaf page key size" : 2867,
			"maximum leaf page size" : 32768,
			"maximum leaf page value size" : 67108864,
			"maximum tree depth" : 3,
			"number of key/value pairs" : 0,
			"overflow pages" : 0,
			"pages rewritten by compaction" : 0,
			"row-store internal pages" : 0,
			"row-store leaf pages" : 0
		},
		"cache" : {
			"bytes currently in the cache" : 4271,
			"bytes read into cache" : 0,
			"bytes written from cache" : 4865,
			"checkpoint blocked page eviction" : 0,
			"data source pages selected for eviction unable to be evicted" : 0,
			"eviction walk passes of a file" : 0,
			"eviction walk target pages histogram - 0-9" : 0,
			"eviction walk target pages histogram - 10-31" : 0,
			"eviction walk target pages histogram - 128 and higher" : 0,
			"eviction walk target pages histogram - 32-63" : 0,
			"eviction walk target pages histogram - 64-128" : 0,
			"eviction walks abandoned" : 0,
			"eviction walks gave up because they restarted their walk twice" : 0,
			"eviction walks gave up because they saw too many pages and found no candidates" : 0,
			"eviction walks gave up because they saw too many pages and found too few candidates" : 0,
			"eviction walks reached end of tree" : 0,
			"eviction walks started from root of tree" : 0,
			"eviction walks started from saved location in tree" : 0,
			"hazard pointer blocked page eviction" : 0,
			"in-memory page passed criteria to be split" : 0,
			"in-memory page splits" : 0,
			"internal pages evicted" : 0,
			"internal pages split during eviction" : 0,
			"leaf pages split during eviction" : 0,
			"modified pages evicted" : 1,
			"overflow pages read into cache" : 0,
			"page split during eviction deepened the tree" : 0,
			"page written requiring cache overflow records" : 0,
			"pages read into cache" : 0,
			"pages read into cache after truncate" : 2,
			"pages read into cache after truncate in prepare state" : 0,
			"pages read into cache requiring cache overflow entries" : 0,
			"pages requested from the cache" : 51,
			"pages seen by eviction walk" : 0,
			"pages written from cache" : 14,
			"pages written requiring in-memory restoration" : 0,
			"tracked dirty bytes in the cache" : 0,
			"unmodified pages evicted" : 0
		},
		"cache_walk" : {
			"Average difference between current eviction generation when the page was last considered" : 0,
			"Average on-disk page image size seen" : 0,
			"Average time in cache for pages that have been visited by the eviction server" : 0,
			"Average time in cache for pages that have not been visited by the eviction server" : 0,
			"Clean pages currently in cache" : 0,
			"Current eviction generation" : 0,
			"Dirty pages currently in cache" : 0,
			"Entries in the root page" : 0,
			"Internal pages currently in cache" : 0,
			"Leaf pages currently in cache" : 0,
			"Maximum difference between current eviction generation when the page was last considered" : 0,
			"Maximum page size seen" : 0,
			"Minimum on-disk page image size seen" : 0,
			"Number of pages never visited by eviction server" : 0,
			"On-disk page image sizes smaller than a single allocation unit" : 0,
			"Pages created in memory and never written" : 0,
			"Pages currently queued for eviction" : 0,
			"Pages that could not be queued for eviction" : 0,
			"Refs skipped during cache traversal" : 0,
			"Size of the root page" : 0,
			"Total number of pages currently in cache" : 0
		},
		"compression" : {
			"compressed pages read" : 0,
			"compressed pages written" : 0,
			"page written failed to compress" : 0,
			"page written was too small to compress" : 14,
			"raw compression call failed, additional data available" : 0,
			"raw compression call failed, no additional data available" : 0,
			"raw compression call succeeded" : 0
		},
		"cursor" : {
			"bulk-loaded cursor-insert calls" : 0,
			"create calls" : 3,
			"cursor operation restarted" : 0,
			"cursor-insert key and value bytes inserted" : 3125,
			"cursor-remove key bytes removed" : 5,
			"cursor-update value bytes updated" : 0,
			"cursors cached on close" : 0,
			"cursors reused from cache" : 33,
			"insert calls" : 15,
			"modify calls" : 0,
			"next calls" : 105,
			"prev calls" : 3,
			"remove calls" : 5,
			"reserve calls" : 0,
			"reset calls" : 86,
			"search calls" : 10,
			"search near calls" : 5,
			"truncate calls" : 0,
			"update calls" : 0
		},
		"reconciliation" : {
			"dictionary matches" : 0,
			"fast-path pages deleted" : 0,
			"internal page key bytes discarded using suffix compression" : 0,
			"internal page multi-block writes" : 0,
			"internal-page overflow keys" : 0,
			"leaf page key bytes discarded using prefix compression" : 0,
			"leaf page multi-block writes" : 0,
			"leaf-page overflow keys" : 0,
			"maximum blocks required for a page" : 1,
			"overflow values written" : 0,
			"page checksum matches" : 0,
			"page reconciliation calls" : 18,
			"page reconciliation calls for eviction" : 1,
			"pages deleted" : 4
		},
		"session" : {
			"cached cursor count" : 3,
			"object compaction" : 0,
			"open cursor count" : 0
		},
		"transaction" : {
			"update conflicts" : 0
		}
	},
	"nindexes" : 1,
	"totalIndexSize" : 36864,
	"indexSizes" : {
		"_id_" : 36864
	},
	"ok" : 1
}
> //db.empleados.stats() refleja todo tipo de informacion acerca de la coleccion de empleados asi como tambien informacion de la base de datos a la que pertenece, la cual es A1700711
> 